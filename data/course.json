{
    "slug": "javascript-hard-parts-v2",
    "title": "JavaScript: The Hard Parts, v2",
    "description": "Go under the hood of some of the most important aspects of JavaScript! You'll learn what you need to know to become a sought-after, versatile, problem-solving developer.\nCombining mental models of JavaScript's inner workings and hands-on programming challenges, this course will give you a solid understanding of callbacks and higher-order functions, closure, asynchronous JavaScript, and object-oriented JavaScript! This course is for developers with a basic to intermediate knowledge of JavaScript who wants to deepen their understanding of the fundamentals to the next level.",
    "thumbnail": "https://static.frontendmasters.com/assets/courses/2020-01-07-javascript-hard-parts-v2/thumb%402x.jpg",
    "resources": [
        {
            "label": "Course Slides",
            "url": "https://static.frontendmasters.com/resources/2019-09-18-javascript-hard-parts-v2/javascript-hard-parts-v2.pdf"
        }
    ],
    "instructors": [
        {
            "slug": "sentance",
            "name": "Will Sentance",
            "tagLine": "Codesmith",
            "bio": "Will Sentance is co-founder and CEO at Codesmith â€“ a software engineering and machine learning residency based in Los Angeles, New York, and Oxford. He is the creator of Icecomm, the most famous developer platform for P2P video and data communication. Before Codesmith, Will was CEO at Ownly and a Software Engineer at Gem.\nWill graduated from Oxford University and Harvard University.",
            "imageURL": "https://static.frontendmasters.com/assets/teachers/sentance/thumb.png",
            "socialSettings": {
                "twitter": "@willsentance"
            }
        }
    ],
    "lessonSlugs": [
        "introduction",
        "thread-of-execution",
        "functions",
        "call-stack",
        "generalized-functions",
        "repeating-functionality",
        "higher-order-functions",
        "higher-order-functions-example",
        "higher-order-functions-q-a",
        "callbacks-higher-order-functions",
        "arrow-functions",
        "pair-programming",
        "closure-introduction",
        "returning-functions",
        "nested-function-scope",
        "retaining-function-memory",
        "function-closure",
        "closure-q-a",
        "closure-technical-definition-review",
        "multiple-closure-instances",
        "practical-applications",
        "closure-exercises",
        "single-threaded-execution-review",
        "asynchronicity-in-javascript",
        "asynchronous-browser-features",
        "web-api-example",
        "web-api-rules",
        "callback-queue-event-loop",
        "callback-queue-and-event-loop-q-a",
        "callback-hell-async-exercises",
        "promises-introduction",
        "promises-example-fetch",
        "promises-example-then",
        "web-apis-promises-example-fetch",
        "web-apis-promises-example-then",
        "web-apis-promises-example-microtask-queue",
        "promises-and-asynchronous-q-a",
        "promises-review",
        "class-oop-introduction",
        "object-dot-notation",
        "factory-functions",
        "factory-functions-example",
        "prototype-chain",
        "prototype-chain-example-prototypal-link",
        "prototype-chain-example-implicit-parameters",
        "hasownproperty-method",
        "this-keyword",
        "arrow-function-scope-this",
        "prototype-chain-review",
        "new-keyword",
        "new-keyword-example",
        "class-keyword",
        "wrapping-up"
    ],
    "lessonData": {
        "BZQZvCoghZ": {
            "slug": "callback-queue-event-loop",
            "title": "Callback Queue \u0026 Event Loop",
            "description": "Will defines the concept of a callback queue, then diagrams an example that demonstrates the functionality of the event loop, which ties the call stack and callback queue together.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/28-90.jpg",
            "index": 27,
            "elementIndex": 32,
            "statsId": "BZQZvCoghZ",
            "hash": "BZQZvCoghZ",
            "timestamp": "03:11:03 - 03:25:29",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/BZQZvCoghZ"
        },
        "BvhsxRExZr": {
            "slug": "retaining-function-memory",
            "title": "Retaining Function Memory",
            "description": "Will diagrams what is happening when a function is called outside of the function in which it was defined. This new function retains it's original local memory from where it was created.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/16-90.jpg",
            "index": 15,
            "elementIndex": 19,
            "statsId": "BvhsxRExZr",
            "hash": "BvhsxRExZr",
            "timestamp": "01:47:22 - 01:56:13",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/BvhsxRExZr"
        },
        "DPrzwwlWVd": {
            "slug": "introduction",
            "title": "Introduction",
            "description": "Will Sentance introduces the agenda for the course, defines the purpose of the course that differs for mid level and senior level engineers, then explains how this version of the course is an improvement to version one.\r\n - https://static.frontendmasters.com/resources/2019-09-18-javascript-hard-parts-v2/javascript-hard-parts-v2.pdf",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/1-90.jpg",
            "index": 0,
            "elementIndex": 1,
            "statsId": "DPrzwwlWVd",
            "hash": "DPrzwwlWVd",
            "timestamp": "00:00:00 - 00:03:40",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/DPrzwwlWVd",
            "annotations": [
                {
                    "id": "DPrzwwlWVd-00:00:06-1",
                    "lessonHash": "DPrzwwlWVd",
                    "range": [
                        6,
                        16
                    ],
                    "message": "Here's a link to [the slides](https://static.frontendmasters.com/resources/2019-09-18-javascript-hard-parts-v2/javascript-hard-parts-v2.pdf)"
                }
            ]
        },
        "FXNFOyIenb": {
            "slug": "call-stack",
            "title": "Call Stack",
            "description": "Will introduces the call stack to explain how JavaScript keeps track of the thread of execution.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/4-90.jpg",
            "index": 3,
            "elementIndex": 5,
            "statsId": "FXNFOyIenb",
            "hash": "FXNFOyIenb",
            "timestamp": "00:16:13 - 00:20:46",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/FXNFOyIenb"
        },
        "HkrHRyjSqp": {
            "slug": "higher-order-functions-example",
            "title": "Higher Order Functions Example",
            "description": "Will diagrams a proposed solution that generalizes a function to accept an argument and a function as parameters.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/8-90.jpg",
            "index": 7,
            "elementIndex": 10,
            "statsId": "HkrHRyjSqp",
            "hash": "HkrHRyjSqp",
            "timestamp": "00:43:10 - 00:53:15",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/HkrHRyjSqp"
        },
        "HvULhXXMEn": {
            "slug": "factory-functions-example",
            "title": "Factory Functions Example",
            "description": "Will diagrams an examples of a function that is generalized to accept properties that are assigned to a new object and returned. After demonstrating how easy it is to reason about and utilize in a codebase, Will makes the argument that the approach is unusable.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/42-90.jpg",
            "index": 41,
            "elementIndex": 48,
            "statsId": "HvULhXXMEn",
            "hash": "HvULhXXMEn",
            "timestamp": "05:00:43 - 05:13:12",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/HvULhXXMEn"
        },
        "IFJBEDUFlI": {
            "slug": "function-closure",
            "title": "Function Closure",
            "description": "Will reveals the key functionality of closure that allows a function to have a permanent stored data cache. The caveats of the functionality are discussed, as well as the hidden property of [[scope]] afforded to functions.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/17-90.jpg",
            "index": 16,
            "elementIndex": 20,
            "statsId": "IFJBEDUFlI",
            "hash": "IFJBEDUFlI",
            "timestamp": "01:56:14 - 02:04:02",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/IFJBEDUFlI"
        },
        "IOaQFmAfCi": {
            "slug": "closure-exercises",
            "title": "Closure Exercises",
            "description": "Students are then instructed to continue pair programming with closure exercises.\n- Exercise: http://csbin.io/closures\n- Solution: https://github.com/FrontendMasters/fm-snippets/blob/main/javascript-hard-parts-v2/closures.js",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/22-90.jpg",
            "index": 21,
            "elementIndex": 25,
            "statsId": "IOaQFmAfCi",
            "hash": "IOaQFmAfCi",
            "timestamp": "02:36:48 - 02:37:40",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/IOaQFmAfCi",
            "annotations": [
                {
                    "id": "aa2c3937-ef5e-420d-9011-37122fcf7a70",
                    "lessonHash": "IOaQFmAfCi",
                    "range": [
                        31,
                        41
                    ],
                    "message": "Here's a link to the [closures exercises](http://csbin.io/closures)"
                },
                {
                    "id": "d63f56fa-387c-4ac3-8acc-15cab3b21282",
                    "lessonHash": "IOaQFmAfCi",
                    "range": [
                        41,
                        51
                    ],
                    "message": "Here's a link to the [closures solutions](https://github.com/FrontendMasters/fm-snippets/blob/main/javascript-hard-parts-v2/closures.js)"
                }
            ]
        },
        "MqodwDPsfn": {
            "slug": "promises-example-fetch",
            "title": "Promises Example: fetch",
            "description": "Will diagrams what is happening behind the scenes when a call to a Twitter API is made using fetch. The two pronged functionality stemming from the fetch promise is explored.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/32-90.jpg",
            "index": 31,
            "elementIndex": 37,
            "statsId": "MqodwDPsfn",
            "hash": "MqodwDPsfn",
            "timestamp": "03:37:00 - 03:49:03",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/MqodwDPsfn"
        },
        "MwYjHXIDpm": {
            "slug": "higher-order-functions",
            "title": "Higher Order Functions",
            "description": "Will diagrams the function with one piece of functionality changed to pursue the point that this function and the previous could be restructured to accommodate both functionality cases by changing it to accept both data and instructions in the form of a function of how to manipulate the data.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/7-90.jpg",
            "index": 6,
            "elementIndex": 9,
            "statsId": "MwYjHXIDpm",
            "hash": "MwYjHXIDpm",
            "timestamp": "00:33:46 - 00:43:09",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/MwYjHXIDpm"
        },
        "NUYDiLyNlz": {
            "slug": "class-keyword",
            "title": "class Keyword",
            "description": "Will introduces the idiomatic way to define when the new keyword needs to be used to instantiate an object. In addition, the syntactic sugar of the class keyword is discussed, and how it really is no different under the hood than what was demonstrated in previous sections.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/52-90.jpg",
            "index": 51,
            "elementIndex": 58,
            "statsId": "NUYDiLyNlz",
            "hash": "NUYDiLyNlz",
            "timestamp": "06:26:04 - 06:39:02",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/NUYDiLyNlz"
        },
        "OOqrzjtscT": {
            "slug": "closure-technical-definition-review",
            "title": "Closure Technical Definition \u0026 Review",
            "description": "Will discusses the concept of lexical or static scope as the key as to why closure works, and defines in technical terms what is occuring when closure is used. A clarification is also taken regarding reassigning variables with the backpack attached.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/19-90.jpg",
            "index": 18,
            "elementIndex": 22,
            "statsId": "OOqrzjtscT",
            "hash": "OOqrzjtscT",
            "timestamp": "02:10:19 - 02:20:12",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/OOqrzjtscT",
            "annotations": [
                {
                    "id": "OOqrzjtscT-00:00:39-13",
                    "lessonHash": "OOqrzjtscT",
                    "range": [
                        39,
                        49
                    ],
                    "message": "Here's a link to [this article](https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8)"
                },
                {
                    "id": "OOqrzjtscT-00:01:54-14",
                    "lessonHash": "OOqrzjtscT",
                    "range": [
                        123,
                        133
                    ],
                    "message": "Here's a link to [If Hemingway Wrote JavaScrip](https://nostarch.com/hemingway)"
                }
            ]
        },
        "Ocjvvrwkxn": {
            "slug": "promises-review",
            "title": "Promises Review",
            "description": "Will discusses the problems of promises, including that most developers don't understand them. The benefits introduced include error handling. The features of Promises, web APIs, and the callback, microtask queues, and event loop are reviewed. A final question is asked regarding whether the async await has the same functionality.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/38.2-90.jpg",
            "index": 37,
            "elementIndex": 43,
            "statsId": "Ocjvvrwkxn",
            "hash": "Ocjvvrwkxn",
            "timestamp": "04:37:06 - 04:43:13",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/Ocjvvrwkxn"
        },
        "PNzKWHcxMZ": {
            "slug": "prototype-chain-review",
            "title": "Prototype Chain Review",
            "description": "Will reviews the last few sections, and how they relate to the standard way of object creation in the proceeding sections.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/49-90.jpg",
            "index": 48,
            "elementIndex": 55,
            "statsId": "PNzKWHcxMZ",
            "hash": "PNzKWHcxMZ",
            "timestamp": "05:55:43 - 05:58:46",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/PNzKWHcxMZ"
        },
        "RLPqfXKszf": {
            "slug": "prototype-chain-example-prototypal-link",
            "title": "Prototype Chain Example: Prototypal Link",
            "description": "Will diagrams an example of a factory function that utilizes Object.create() with the argument of a function with desired functionality to create an object with a prototypal link to the functionality.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/44-90.jpg",
            "index": 43,
            "elementIndex": 50,
            "statsId": "RLPqfXKszf",
            "hash": "RLPqfXKszf",
            "timestamp": "05:17:31 - 05:28:58",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/RLPqfXKszf"
        },
        "TFaJaUVsdX": {
            "slug": "prototype-chain",
            "title": "Prototype Chain",
            "description": "Will introduces the prototype chain, or `__proto__` as a way to access functions that were set when Object.create() is used to instantiate an object.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/43-90.jpg",
            "index": 42,
            "elementIndex": 49,
            "statsId": "TFaJaUVsdX",
            "hash": "TFaJaUVsdX",
            "timestamp": "05:13:13 - 05:17:30",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/TFaJaUVsdX"
        },
        "TdbYEZSUeR": {
            "slug": "class-oop-introduction",
            "title": "Class \u0026 OOP Introduction",
            "description": "Will introduces why classes and prototypes are important to learn as a developer, and what will be learned in the upcoming sections. The core idea of development is covered to understand how code should be structured, and how developers write code to be easy to reason about, easy to add new functionality, and efficient. The argument is made that object oriented programming is all of these things.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/39-90.jpg",
            "index": 38,
            "elementIndex": 45,
            "statsId": "TdbYEZSUeR",
            "hash": "TdbYEZSUeR",
            "timestamp": "04:43:14 - 04:49:59",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/TdbYEZSUeR",
            "annotations": [
                {
                    "id": "TdbYEZSUeR-00:00:05-22",
                    "lessonHash": "TdbYEZSUeR",
                    "range": [
                        5,
                        15
                    ],
                    "message": "Will is on page 66 of [the slides](https://static.frontendmasters.com/resources/2019-09-18-javascript-hard-parts-v2/javascript-hard-parts-v2.pdf)"
                }
            ]
        },
        "TrJxBDXSMn": {
            "slug": "functions",
            "title": "Functions",
            "description": "Will reviews how functions scope the thread of execution and memory.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/3-90.jpg",
            "index": 2,
            "elementIndex": 4,
            "statsId": "TrJxBDXSMn",
            "hash": "TrJxBDXSMn",
            "timestamp": "00:08:25 - 00:16:12",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/TrJxBDXSMn"
        },
        "UndIBJwtoZ": {
            "slug": "promises-and-asynchronous-q-a",
            "title": "Promises and Asynchronous Q\u0026A",
            "description": "Will answers several questions from the audience regarding the returned data from the fetch function, whether functions are passed by reference or by value when passed to a web API, arguments within the function passed into the web API, what precedence objects take within the queues, and which functions go into the microtask queue and which go in the callback queue.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/37-90.jpg",
            "index": 36,
            "elementIndex": 42,
            "statsId": "UndIBJwtoZ",
            "hash": "UndIBJwtoZ",
            "timestamp": "04:28:56 - 04:37:05",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/UndIBJwtoZ",
            "annotations": [
                {
                    "id": "UndIBJwtoZ-00:02:49-19",
                    "lessonHash": "UndIBJwtoZ",
                    "range": [
                        169,
                        179
                    ],
                    "message": "Here's a link to a list of the [MDN Web APIs](https://developer.mozilla.org/en-US/docs/Web/API)"
                },
                {
                    "id": "UndIBJwtoZ-00:05:47-20",
                    "lessonHash": "UndIBJwtoZ",
                    "range": [
                        345,
                        355
                    ],
                    "message": "Here's a link to [The Hard Parts of Servers and Node.js](https://frontendmasters.com/courses/servers-node-js/)"
                }
            ]
        },
        "WMbtMKqEzn": {
            "slug": "higher-order-functions-q-a",
            "title": "Higher Order Functions Q\u0026A",
            "description": "Will answers a question from the audience about execution context within a for loop, and whether the function arguments are pass by value or pass by reference.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/9-90.jpg",
            "index": 8,
            "elementIndex": 11,
            "statsId": "WMbtMKqEzn",
            "hash": "WMbtMKqEzn",
            "timestamp": "00:53:16 - 00:55:24",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/WMbtMKqEzn"
        },
        "XGjvzCVHHY": {
            "slug": "hasownproperty-method",
            "title": "hasOwnProperty Method",
            "description": "Will diagrams the hasOwnProperty method to determine whether an object has a specific property to clarify where the property is stored.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/46-90.jpg",
            "index": 45,
            "elementIndex": 52,
            "statsId": "XGjvzCVHHY",
            "hash": "XGjvzCVHHY",
            "timestamp": "05:37:14 - 05:42:57",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/XGjvzCVHHY",
            "annotations": [
                {
                    "id": "XGjvzCVHHY-00:05:01-24",
                    "lessonHash": "XGjvzCVHHY",
                    "range": [
                        301,
                        311
                    ],
                    "message": "Here's a link to [The Hard Parts: OOP](https://frontendmasters.com/courses/object-oriented-js/)"
                }
            ]
        },
        "avpTbTBfez": {
            "slug": "nested-function-scope",
            "title": "Nested Function Scope",
            "description": "Will diagrams a function that is both defined and called within a function to pose the question of whether its where it's defined or called as to what scope it has access to.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/15-90.jpg",
            "index": 14,
            "elementIndex": 18,
            "statsId": "avpTbTBfez",
            "hash": "avpTbTBfez",
            "timestamp": "01:40:29 - 01:47:21",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/avpTbTBfez"
        },
        "bQbZQmpBvy": {
            "slug": "web-apis-promises-example-fetch",
            "title": "Web APIs \u0026 Promises Example: fetch",
            "description": "Will diagrams a more complex example involving both web browser APIs and promises. The problem begins by instantiating functions into the global memory, then a setTimeout function is called, and a fetch call is made to a Twitter API. It's demonstrated how each of these things end up in the context of the web browser, callback queue, or call stack.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/34-90.jpg",
            "index": 33,
            "elementIndex": 39,
            "statsId": "bQbZQmpBvy",
            "hash": "bQbZQmpBvy",
            "timestamp": "04:00:19 - 04:15:53",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/bQbZQmpBvy"
        },
        "bsZjtAjuYM": {
            "slug": "object-dot-notation",
            "title": "Object Dot Notation",
            "description": "Will provides a scenario in order to make the argument for storing data and functionality together in one place. Dot notation is introduced as a way to allow users to assign and access elements in an object, including functions.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/40-90.jpg",
            "index": 39,
            "elementIndex": 46,
            "statsId": "bsZjtAjuYM",
            "hash": "bsZjtAjuYM",
            "timestamp": "04:50:00 - 04:54:59",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/bsZjtAjuYM"
        },
        "cvZOwhedwI": {
            "slug": "promises-example-then",
            "title": "Promises Example: then",
            "description": "Will diagrams the built-in method that calls methods that depend on the returned data. The rest of the example is diagrammed in full to demonstrate how the combination of fetch and then can pull data from an external API, and halt execution of methods that depend on the data until the data is received.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/33-90.jpg",
            "index": 32,
            "elementIndex": 38,
            "statsId": "cvZOwhedwI",
            "hash": "cvZOwhedwI",
            "timestamp": "03:49:04 - 04:00:18",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/cvZOwhedwI"
        },
        "dHonhvIuQo": {
            "slug": "asynchronous-browser-features",
            "title": "Asynchronous Browser Features",
            "description": "Will discusses some of the key features that the browser provides. To interact with the features that the browser offers, JavaScript offers \"facade functions\" that look like JavaScript, but are actually part of the browser. Examples of these functions include console, fetch, document, and setTimeout.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/25-90.jpg",
            "index": 24,
            "elementIndex": 29,
            "statsId": "dHonhvIuQo",
            "hash": "dHonhvIuQo",
            "timestamp": "02:51:06 - 02:58:12",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/dHonhvIuQo"
        },
        "daGiKcipVN": {
            "slug": "repeating-functionality",
            "title": "Repeating Functionality",
            "description": "Will diagrams an function that uses an array as a parameter. Students are then directed to pair with a partner and verbalize the same diagram with one character changed to provide context a case where a generalized function might be useful.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/6-90.jpg",
            "index": 5,
            "elementIndex": 8,
            "statsId": "daGiKcipVN",
            "hash": "daGiKcipVN",
            "timestamp": "00:26:03 - 00:33:45",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/daGiKcipVN"
        },
        "drRrFgArPU": {
            "slug": "wrapping-up",
            "title": "Wrapping Up",
            "description": "Will concludes the course by summarizing what was covered in the course, as well as suggesting further resources and points of interest to study.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/53-90.jpg",
            "index": 52,
            "elementIndex": 60,
            "statsId": "drRrFgArPU",
            "hash": "drRrFgArPU",
            "timestamp": "06:39:03 - 06:42:20",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/drRrFgArPU",
            "annotations": [
                {
                    "id": "drRrFgArPU-00:01:00-25",
                    "lessonHash": "drRrFgArPU",
                    "range": [
                        59,
                        69
                    ],
                    "message": "Here's a link to [The Hard Parts: Functional Programming Fundamentals](https://frontendmasters.com/courses/functional-js-fundamentals)"
                }
            ]
        },
        "gHVkgbSOej": {
            "slug": "web-api-example",
            "title": "Web API Example",
            "description": "Will diagrams what is happening when setTimeout is called, and demonstrates why it doesn't break the rule of JavaScript being single-threaded.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/26-90.jpg",
            "index": 25,
            "elementIndex": 30,
            "statsId": "gHVkgbSOej",
            "hash": "gHVkgbSOej",
            "timestamp": "02:58:13 - 03:06:39",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/gHVkgbSOej"
        },
        "gtNJFEsPqB": {
            "slug": "practical-applications",
            "title": "Practical Applications",
            "description": "Will provides examples of where closure is used, including helper functions, iterators, generators, modules, and asynchronous JavaScript. Real use cases are discussed for clean, professional code.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/21-90.jpg",
            "index": 20,
            "elementIndex": 24,
            "statsId": "gtNJFEsPqB",
            "hash": "gtNJFEsPqB",
            "timestamp": "02:29:05 - 02:36:47",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/gtNJFEsPqB"
        },
        "gxtvipYotj": {
            "slug": "single-threaded-execution-review",
            "title": "Single Threaded Execution Review",
            "description": "Will introduces what will be covered in the next few sections, then goes on to review how JavaScript executes code through a single thread.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/23-90.jpg",
            "index": 22,
            "elementIndex": 27,
            "statsId": "gxtvipYotj",
            "hash": "gxtvipYotj",
            "timestamp": "02:37:41 - 02:44:59",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/gxtvipYotj",
            "annotations": [
                {
                    "id": "gxtvipYotj-00:01:39-16",
                    "lessonHash": "gxtvipYotj",
                    "range": [
                        87,
                        97
                    ],
                    "message": "Here's a link to Jake Archibald's [article on microtasks](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)"
                },
                {
                    "id": "2a0713b4-6e17-4346-b19c-ccfeb7f04e1e",
                    "lessonHash": "gxtvipYotj",
                    "range": [
                        7,
                        17
                    ],
                    "message": "Will is on page 46 of [the slides](https://static.frontendmasters.com/resources/2019-09-18-javascript-hard-parts-v2/javascript-hard-parts-v2.pdf)"
                }
            ]
        },
        "hGLXqBbbKd": {
            "slug": "thread-of-execution",
            "title": "Thread of Execution",
            "description": "Will reviews how JavaScript traverses code with an example while using precise language.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/2.2-90.jpg",
            "index": 1,
            "elementIndex": 3,
            "statsId": "hGLXqBbbKd",
            "hash": "hGLXqBbbKd",
            "timestamp": "00:03:41 - 00:08:24",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/hGLXqBbbKd",
            "annotations": [
                {
                    "id": "hGLXqBbbKd-00:00:05-3",
                    "lessonHash": "hGLXqBbbKd",
                    "range": [
                        5,
                        15
                    ],
                    "message": "Will is on page 5 of [the slides](https://static.frontendmasters.com/resources/2019-09-18-javascript-hard-parts-v2/javascript-hard-parts-v2.pdf)"
                }
            ]
        },
        "hgiVdZtekd": {
            "slug": "callback-queue-and-event-loop-q-a",
            "title": "Callback Queue and Event Loop Q\u0026A",
            "description": "Will fields questions from the audience about what would happen if the one of the functions were to return an augmented variable, a clarification on the previous example, and what would happen if the function's order was augmented.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/29-90.jpg",
            "index": 28,
            "elementIndex": 33,
            "statsId": "hgiVdZtekd",
            "hash": "hgiVdZtekd",
            "timestamp": "03:25:30 - 03:27:13",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/hgiVdZtekd"
        },
        "jYYKuTkShq": {
            "slug": "factory-functions",
            "title": "Factory Functions",
            "description": "The built-in function Object.create() is introduced as a way to create null objects that provide more control on the object. The concept of the generalized function to produce objects is introduced.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/41-90.jpg",
            "index": 40,
            "elementIndex": 47,
            "statsId": "jYYKuTkShq",
            "hash": "jYYKuTkShq",
            "timestamp": "04:55:00 - 05:00:42",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/jYYKuTkShq"
        },
        "kVeNFNhvkc": {
            "slug": "promises-introduction",
            "title": "Promises Introduction",
            "description": "Will gives context to what JavaScript was like before ES6, and explains why promises are an extremely powerful feature today. The two-pronged \"facade\" functions that were introduced to initiate background web browser work, then return a placeholder object to JavaScript are introduced.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/31-90.jpg",
            "index": 30,
            "elementIndex": 36,
            "statsId": "kVeNFNhvkc",
            "hash": "kVeNFNhvkc",
            "timestamp": "03:30:29 - 03:36:59",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/kVeNFNhvkc",
            "annotations": [
                {
                    "id": "kVeNFNhvkc-00:00:07-18",
                    "lessonHash": "kVeNFNhvkc",
                    "range": [
                        7,
                        17
                    ],
                    "message": "Will is on page 58 of [the slides](https://static.frontendmasters.com/resources/2019-09-18-javascript-hard-parts-v2/javascript-hard-parts-v2.pdf)"
                }
            ]
        },
        "lZBKRPrmJR": {
            "slug": "web-apis-promises-example-microtask-queue",
            "title": "Web APIs \u0026 Promises Example: Microtask Queue",
            "description": "Will continues diagramming the example involving both web browser APIs and promises. The event loop reports back that the call stack is clear, so the callback (or task) queue is addressed. The concept of a microtask queue is introduced.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/36-90.jpg",
            "index": 35,
            "elementIndex": 41,
            "statsId": "lZBKRPrmJR",
            "hash": "lZBKRPrmJR",
            "timestamp": "04:22:18 - 04:28:55",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/lZBKRPrmJR"
        },
        "lqomHnVypz": {
            "slug": "new-keyword-example",
            "title": "new Keyword Example",
            "description": "Will diagrams what the new keyword is doing under the hood when it's utilized to instantiate a new object. It's demonstrated how, through accessing the prototype object, it can automate much of the process that was demonstrated previously in the course.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/51-90.jpg",
            "index": 50,
            "elementIndex": 57,
            "statsId": "lqomHnVypz",
            "hash": "lqomHnVypz",
            "timestamp": "06:10:59 - 06:26:03",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/lqomHnVypz"
        },
        "mFJhKdyHBV": {
            "slug": "generalized-functions",
            "title": "Generalized Functions",
            "description": "Will uses a trivial example to demonstrate how parameters can be used to extend functionality.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/5-90.jpg",
            "index": 4,
            "elementIndex": 7,
            "statsId": "mFJhKdyHBV",
            "hash": "mFJhKdyHBV",
            "timestamp": "00:20:47 - 00:26:02",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/mFJhKdyHBV",
            "annotations": [
                {
                    "id": "mFJhKdyHBV-00:00:04-4",
                    "lessonHash": "mFJhKdyHBV",
                    "range": [
                        7,
                        17
                    ],
                    "message": "Will is on page 9 of [the slides](https://static.frontendmasters.com/resources/2019-09-18-javascript-hard-parts-v2/javascript-hard-parts-v2.pdf)"
                },
                {
                    "id": "mFJhKdyHBV-00:00:10-5",
                    "lessonHash": "mFJhKdyHBV",
                    "range": [
                        10,
                        20
                    ],
                    "message": "Here's a link to [Hard Parts: Functional Programming Fundamentals](https://frontendmasters.com/courses/functional-js-fundamentals)"
                }
            ]
        },
        "mNKguqhsqI": {
            "slug": "closure-introduction",
            "title": "Closure Introduction",
            "description": "Will explains the many areas where closure is utilized within the JavaScript language, then goes on to foreshadow the next section by explaining how a function eliminates the state after it's executed, but that it could be useful if it could keep a live cache of data.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/13-90.jpg",
            "index": 12,
            "elementIndex": 16,
            "statsId": "mNKguqhsqI",
            "hash": "mNKguqhsqI",
            "timestamp": "01:19:47 - 01:25:10",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/mNKguqhsqI",
            "annotations": [
                {
                    "id": "mNKguqhsqI-00:01:37-10",
                    "lessonHash": "mNKguqhsqI",
                    "range": [
                        97,
                        107
                    ],
                    "message": "Here's a link to Will's [other courses](https://frontendmasters.com/teachers/will-sentance/)"
                },
                {
                    "id": "e0e3b2d4-20dc-4049-9546-e65e6b426a55",
                    "lessonHash": "mNKguqhsqI",
                    "range": [
                        6,
                        16
                    ],
                    "message": "Will is on page 32 of [the slides](https://static.frontendmasters.com/resources/2019-09-18-javascript-hard-parts-v2/javascript-hard-parts-v2.pdf)"
                }
            ]
        },
        "msbfuclUKr": {
            "slug": "web-apis-promises-example-then",
            "title": "Web APIs \u0026 Promises Example: then",
            "description": "Will continues diagramming the example involving both web browser APIs and promises. The promise is returned by the fetch call, and the \"then\" statement is reached and the function call is placed on the callback queue. The thread of execution is then blocked by a function, and a log statement is reached.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/35-90.jpg",
            "index": 34,
            "elementIndex": 40,
            "statsId": "msbfuclUKr",
            "hash": "msbfuclUKr",
            "timestamp": "04:15:54 - 04:22:17",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/msbfuclUKr"
        },
        "nwBZDpWSci": {
            "slug": "web-api-rules",
            "title": "Web API Rules",
            "description": "Will fields questions from the audience about how the function that is used by the \"facade functions\" keep state, and how the call stack works when asynchronicity is introduced. These questions are used to preface the point that there needs to be clearly defined rules for how this functionality works.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/27-90.jpg",
            "index": 26,
            "elementIndex": 31,
            "statsId": "nwBZDpWSci",
            "hash": "nwBZDpWSci",
            "timestamp": "03:06:40 - 03:11:02",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/nwBZDpWSci"
        },
        "oNLUVkSBMf": {
            "slug": "this-keyword",
            "title": "this Keyword",
            "description": "Will introduces the use case where a function (or several) is created on a function store, and the question is posed as to what the `this` keyword gets assigned to when nested. The call and apply method are introduced as a way to take control of what `this` gets assigned to, which is different than more antiquated methods.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/47-90.jpg",
            "index": 46,
            "elementIndex": 53,
            "statsId": "oNLUVkSBMf",
            "hash": "oNLUVkSBMf",
            "timestamp": "05:42:58 - 05:50:39",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/oNLUVkSBMf"
        },
        "oPPcryEQsz": {
            "slug": "pair-programming",
            "title": "Pair Programming",
            "description": "Will explains why pair programming is the most effective way to grow as a software engineer. It's outlined how another person helps to tackle blocks, stay focused, refine technical communication, and improve collaboration skills.\n - Exercise: http://csbin.io/callbacks\n - Solution: https://github.com/FrontendMasters/fm-snippets/blob/main/javascript-hard-parts-v2/callbacks.js",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/12.2-90.jpg",
            "index": 11,
            "elementIndex": 14,
            "statsId": "oPPcryEQsz",
            "hash": "oPPcryEQsz",
            "timestamp": "01:13:15 - 01:19:46",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/oPPcryEQsz",
            "annotations": [
                {
                    "id": "3c908afc-a013-4e5c-b918-c8fc6d7dc80d",
                    "lessonHash": "oPPcryEQsz",
                    "range": [
                        22,
                        32
                    ],
                    "message": "Find a friend to pair program with you!"
                },
                {
                    "id": "70e379ff-a051-4174-965c-2164a8a0454a",
                    "lessonHash": "oPPcryEQsz",
                    "range": [
                        359,
                        369
                    ],
                    "message": "Here's a link to the [callbacks exercises](http://csbin.io/callbacks)"
                },
                {
                    "id": "feb079eb-042c-40bb-aa97-2b6e43635eba",
                    "lessonHash": "oPPcryEQsz",
                    "range": [
                        370,
                        380
                    ],
                    "message": "Here's a link to the [callbacks solutions](https://github.com/FrontendMasters/fm-snippets/blob/main/javascript-hard-parts-v2/callbacks.js)"
                }
            ]
        },
        "ouDKcQSHIu": {
            "slug": "asynchronicity-in-javascript",
            "title": "Asynchronicity in JavaScript",
            "description": "Will uses the previous example to explain what issues could be posed by having only a single thread of execution when calling to an API. The additional features on top of JavaScript that have to be introduced to explain the functionality of a setTimeOut function are defined as web browser or Node background APIs, promises, and the event loop, callback/task queue, and microtask queue.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/24-90.jpg",
            "index": 23,
            "elementIndex": 28,
            "statsId": "ouDKcQSHIu",
            "hash": "ouDKcQSHIu",
            "timestamp": "02:45:00 - 02:51:05",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/ouDKcQSHIu"
        },
        "qiPdPMPriQ": {
            "slug": "closure-q-a",
            "title": "Closure Q\u0026A",
            "description": "Will fields questions from the audience regarding whether there can be a wrapper such that there is another execution context returning out the first closure, function decoration, and whether variables that aren't referenced by the returned function are accessible by the backpack. Clarifications are also made on a private variables, and error handling within closure.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/18-90.jpg",
            "index": 17,
            "elementIndex": 21,
            "statsId": "qiPdPMPriQ",
            "hash": "qiPdPMPriQ",
            "timestamp": "02:04:03 - 02:10:18",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/qiPdPMPriQ",
            "annotations": [
                {
                    "id": "qiPdPMPriQ-00:02:34-12",
                    "lessonHash": "qiPdPMPriQ",
                    "range": [
                        124,
                        134
                    ],
                    "message": "Here's a link to [The Hard Parts: Functional Programming Fundamentals](https://frontendmasters.com/courses/functional-js-fundamentals)"
                }
            ]
        },
        "rFGyqAYMrk": {
            "slug": "arrow-function-scope-this",
            "title": "Arrow Function Scope \u0026 this",
            "description": "Will diagrams an example that demonstrates that the normal `this` keyword rules are overridden when used with arrow functions, because of when arrow function contents are evaluated. A question is asked about what would happen if a method on an object is defined as an arrow function.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/48-90.jpg",
            "index": 47,
            "elementIndex": 54,
            "statsId": "rFGyqAYMrk",
            "hash": "rFGyqAYMrk",
            "timestamp": "05:50:40 - 05:55:42",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/rFGyqAYMrk"
        },
        "rOJetsPouA": {
            "slug": "arrow-functions",
            "title": "Arrow Functions",
            "description": "Will diagrams how anonymous functions are used under the hood when an arrow function is instantiated. The drawbacks of using arrow functions on overall understanding and readability is then discussed, and a question is asked about whether there are memory considerations when using an arrow function is asked.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/11.2-90.jpg",
            "index": 10,
            "elementIndex": 13,
            "statsId": "rOJetsPouA",
            "hash": "rOJetsPouA",
            "timestamp": "01:00:41 - 01:13:14",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/rOJetsPouA"
        },
        "rcFwLSDVsc": {
            "slug": "returning-functions",
            "title": "Returning Functions",
            "description": "Will diagrams what is happening when a function returns another function, and drives home the point that by assigning a variable to the result of a function that returns a function, that it's possible to then call the internal function by using the named variable.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/14-90.jpg",
            "index": 13,
            "elementIndex": 17,
            "statsId": "rcFwLSDVsc",
            "hash": "rcFwLSDVsc",
            "timestamp": "01:25:11 - 01:40:28",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/rcFwLSDVsc"
        },
        "tKbTLZwIaE": {
            "slug": "multiple-closure-instances",
            "title": "Multiple Closure Instances",
            "description": "Will diagrams what is happening when another instance of the original closure is instantiated and called. Emphasis is placed on whether the original instance of the closure affects the secondary instance.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/20-90.jpg",
            "index": 19,
            "elementIndex": 23,
            "statsId": "tKbTLZwIaE",
            "hash": "tKbTLZwIaE",
            "timestamp": "02:20:13 - 02:29:04",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/tKbTLZwIaE"
        },
        "uOalyfJvtU": {
            "slug": "callbacks-higher-order-functions",
            "title": "Callbacks \u0026 Higher Order Functions",
            "description": "Will defines which function in the previous example is the higher order function, and which is the callback. The previous material is reviewed by outlining how this pattern keeps the code DRY, readable, and is the backbone of asynchronous JavaScript.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/10.2-90.jpg",
            "index": 9,
            "elementIndex": 12,
            "statsId": "uOalyfJvtU",
            "hash": "uOalyfJvtU",
            "timestamp": "00:55:25 - 01:00:40",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/uOalyfJvtU"
        },
        "vOmofyEfyd": {
            "slug": "new-keyword",
            "title": "new Keyword",
            "description": "Will introduces the new keyword that takes advantage of JavaScript's object-oriented system to automate a factory function.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/50-90.jpg",
            "index": 49,
            "elementIndex": 56,
            "statsId": "vOmofyEfyd",
            "hash": "vOmofyEfyd",
            "timestamp": "05:58:47 - 06:10:58",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/vOmofyEfyd"
        },
        "wUnwRPAbFY": {
            "slug": "callback-hell-async-exercises",
            "title": "Callback Hell \u0026 Async Exercises",
            "description": "Will reviews the problems and benefits of using web browser APIs with callback functions. Students are then instructed to continue pair programming with asynchronous exercises.\n- Exercise: http://csbin.io/async\n- Solution: https://github.com/FrontendMasters/fm-snippets/blob/main/javascript-hard-parts-v2/async.js",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/30-90.jpg",
            "index": 29,
            "elementIndex": 34,
            "statsId": "wUnwRPAbFY",
            "hash": "wUnwRPAbFY",
            "timestamp": "03:27:14 - 03:30:28",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/wUnwRPAbFY",
            "annotations": [
                {
                    "id": "wUnwRPAbFY-00:03:05-17",
                    "lessonHash": "wUnwRPAbFY",
                    "range": [
                        173,
                        183
                    ],
                    "message": "Here's a link to the [async exercises](http://csbin.io/async)"
                },
                {
                    "id": "971bb3dc-f0e1-42d6-8404-f5b925c21737",
                    "lessonHash": "wUnwRPAbFY",
                    "range": [
                        185,
                        195
                    ],
                    "message": "Here's a link to the [async solutions](https://github.com/FrontendMasters/fm-snippets/blob/main/javascript-hard-parts-v2/async.js)"
                }
            ]
        },
        "xXKSnuqBcU": {
            "slug": "prototype-chain-example-implicit-parameters",
            "title": "Prototype Chain Example: Implicit Parameters",
            "description": "Will answers questions from the audience regarding whether only functions can be referenced on the prototypal reference chain, and a clarification as to whether an Object.create() argument is always the `__proto__` property. How to visually see the `__proto__`  property in the console is briefly covered. The execution context created when a function called on the prototypal reference chain is diagrammed, and it's demonstrated how the implicit parameter set in the execution context allows the function work with individual objects despite being shared.",
            "thumbnail": "https://static.frontendmasters.com/thumb/savage-a/2020/01/07/45-90.jpg",
            "index": 44,
            "elementIndex": 51,
            "statsId": "xXKSnuqBcU",
            "hash": "xXKSnuqBcU",
            "timestamp": "05:28:59 - 05:37:13",
            "sourceBase": "https://api.frontendmasters.com/v1/kabuki/video/xXKSnuqBcU",
            "annotations": [
                {
                    "id": "xXKSnuqBcU-00:01:36-23",
                    "lessonHash": "xXKSnuqBcU",
                    "range": [
                        94,
                        104
                    ],
                    "message": "Here's a link to the [MDN Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf) on getPrototypeOf"
                }
            ]
        }
    },
    "lessonElements": [
        "Introduction",
        0,
        "JavaScript Principles",
        1,
        2,
        3,
        "Functions \u0026 Callbacks",
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        "Closure",
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        "Asynchronous JavaScript",
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        "Promises",
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        "Classes \u0026 Prototypes",
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        "Wrapping Up",
        52
    ],
    "lessonHashes": [
        "DPrzwwlWVd",
        "hGLXqBbbKd",
        "TrJxBDXSMn",
        "FXNFOyIenb",
        "mFJhKdyHBV",
        "daGiKcipVN",
        "MwYjHXIDpm",
        "HkrHRyjSqp",
        "WMbtMKqEzn",
        "uOalyfJvtU",
        "rOJetsPouA",
        "oPPcryEQsz",
        "mNKguqhsqI",
        "rcFwLSDVsc",
        "avpTbTBfez",
        "BvhsxRExZr",
        "IFJBEDUFlI",
        "qiPdPMPriQ",
        "OOqrzjtscT",
        "tKbTLZwIaE",
        "gtNJFEsPqB",
        "IOaQFmAfCi",
        "gxtvipYotj",
        "ouDKcQSHIu",
        "dHonhvIuQo",
        "gHVkgbSOej",
        "nwBZDpWSci",
        "BZQZvCoghZ",
        "hgiVdZtekd",
        "wUnwRPAbFY",
        "kVeNFNhvkc",
        "MqodwDPsfn",
        "cvZOwhedwI",
        "bQbZQmpBvy",
        "msbfuclUKr",
        "lZBKRPrmJR",
        "UndIBJwtoZ",
        "Ocjvvrwkxn",
        "TdbYEZSUeR",
        "bsZjtAjuYM",
        "jYYKuTkShq",
        "HvULhXXMEn",
        "TFaJaUVsdX",
        "RLPqfXKszf",
        "xXKSnuqBcU",
        "XGjvzCVHHY",
        "oNLUVkSBMf",
        "rFGyqAYMrk",
        "PNzKWHcxMZ",
        "vOmofyEfyd",
        "lqomHnVypz",
        "NUYDiLyNlz",
        "drRrFgArPU"
    ],
    "isTrial": false,
    "hasHLS": true,
    "hasTranscript": true,
    "hasIntroLoop": false,
    "hasWebVTT": true,
    "datePublished": "2020-01-07"
}